I"8<hr />

<p>layout: post</p>

<p>title: How to add Previous and Next links on wardrobe</p>

<p>date: 2013-10-17</p>

<p>tag: laravel,laravel 4,tips,wardrobe</p>

<p>description: If you’re a regular here you may have noticed that I’m always making some small improvements on my blog. The last one was quite simple, I just wanted to add</p>

<p>author: Marco Monteiro</p>

<p>categories: [laravel,laravel 4,tips,wardrobe]</p>

<hr />

<p>If you’re a regular here you may have noticed that I’m always making some small improvements on my blog. The last one was quite simple, I just wanted to add some previous and next links when the user is reading an article. However, I wasn’t aiming to just simple arrows. I wanted to user to see the title of those articles.</p>

<p>Since my blog uses wardrobe and that is built on top of Laravel, doing that is pretty straight forward.</p>

<!--more-->

<p>First let’s go to the PostController and get those articles.</p>

<p>This is the function you’re looking for:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/**
 * Display the specified resource.
 *
 * @param string $slug
 *
 * @return Response
 */
public function getShow($slug)
{
	$post = $this-&gt;posts-&gt;findBySlug($slug);
	if ( ! $post)
	{
		return App::abort(404, 'Page not found');
	}

	return View::make('themes.'.$this-&gt;theme.'.post', compact('post'));
}
</code></pre></div></div>

<p>So let’s get the prev and next articles based on the Post object.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/**
 * Display the specified resource.
 *
 * @param string $slug
 *
 * @return Response
 */
public function getShow($slug)
{
	$post = $this-&gt;posts-&gt;findBySlug($slug);
	if ( ! $post)
	{
		return App::abort(404, 'Page not found');
	}
	$prev = DB::table('posts')-&gt;orderBy('id', 'asc')-&gt;where('id', '&gt;', $post-&gt;id)-&gt;where('active', '1')-&gt;first();
	$next = DB::table('posts')-&gt;orderBy('id', 'desc')-&gt;where('id', '&lt;', $post-&gt;id)-&gt;where('active', '1')-&gt;first();

	return View::make('themes.'.$this-&gt;theme.'.post', compact('post', 'next', 'prev'));
}
</code></pre></div></div>

<p>Quite easy right? Now you may want to do the same in your getPreview function.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/**
 * Show a post preview.
 *
 * @param int $id
 *
 * @return Response
 */
public function getPreview($id)
{
	$post = $this-&gt;posts-&gt;find($id);
	if ( ! Auth::check() or ! $post)
	{
		return App::abort(404, 'Page not found');
	}
	$prev = DB::table('posts')-&gt;orderBy('id', 'asc')-&gt;where('id', '&gt;', $post-&gt;id)-&gt;where('active', '1')-&gt;first();
	$next = DB::table('posts')-&gt;orderBy('id', 'desc')-&gt;where('id', '&lt;', $post-&gt;id)-&gt;where('active', '1')-&gt;first();

	return View::make('themes.'.$this-&gt;theme.'.post', compact('post', 'next', 'prev'));
}
</code></pre></div></div>

<p>Now you just need to add that navigation links to your layout. I added mine to my post.blade.php file, since our next and prev links will only be used there.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;nav class="other_posts"&gt;
	&lt;ul&gt;
		@if($next)
			&lt;li id="next"&gt;&lt;a href="" rel="prev"&gt; &lt;/a&gt;&lt;/li&gt;
		@endif
		@if($prev)
			&lt;li id="previous"&gt;&lt;a href="" rel="next"&gt;&lt;/a&gt;&lt;/li&gt;
		@endif
	&lt;/ul&gt;
&lt;/nav&gt;
</code></pre></div></div>

<p>That’s is, nice and easy.</p>

<p><strong>ps:</strong> Soon after I published this post I had <a href="https://twitter.com/marcogmonteiro/status/390842895458369536">this talk</a> with <a href="https://twitter.com/dhrrgn">Dan Horrigan</a>. Turns out there’s a better way to do it.</p>

<p>Basically he got the same result with just one query. Look at this beauty.</p>

  	public function getShow($slug)
  	{
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  	$post = $this-&gt;posts-&gt;findBySlug($slug);
  	if ( ! $post)
  	{
	  	return App::abort(404, 'Page not found');
  	}
   
  	$posts = DB::select('SELECT * FROM `posts` WHERE `active` = 1 AND (`id` = (SELECT MIN(`id`) FROM `posts` where `id` &gt; ?) OR `id` = (SELECT MAX(`id`) FROM `posts` where `id` &lt; ?))', array($post-&gt;id, $post-&gt;id));
   
  	$prev = null;
  	$next = null;
  	$count = count($posts);
  	if ($count == 2) {
	 	list($prev, $next) = $posts;
  	} elseif ($count == 1) {
	  	if ($posts[0]-&gt;id &gt; $post-&gt;id) {
		  	$next = $posts[0];
	  	} else {
		  	$prev = $posts[0];    
	  	}
  	}
	
  return View::make('themes.'.$this-&gt;theme.'.post', compact('post', 'next', 'prev'));
  	}
</code></pre></div></div>

<p>Keep in mind that this is really only useful if it is a high traffic site. Thank you <a href="https://twitter.com/dhrrgn">Dan</a>.</p>
:ET