I"¡<hr />

<p>layout: post</p>

<p>title: Starting with composer</p>

<p>date: 2012-09-19</p>

<p>tag: composer,dependency manager,php</p>

<p>description: Iâ€™m just getting started with Composer. Iâ€™ve been reading a lot about it and I think itâ€™s the way to go. I donâ€™t know many common developers (like me) that</p>

<p>author: Marco Monteiro</p>

<p>categories: [composer,dependency manager,php]</p>

<hr />

<p>Iâ€™m just getting started with Composer. Iâ€™ve been reading a lot about it and I think itâ€™s the way to go. I donâ€™t know many common developers (like me) that are already using it, but Iâ€™m going to give it a go. No more Git articles for you. From now on the two main subjects on my blog will be Composer and Unit Testing, since I decided thatâ€™s what Iâ€™m going to do next.
What is this thing called Composer?</p>

<p>Composer is a tool for dependency management in PHP. It allows you to declare the dependent libraries your project needs and it will install them in your project for you.
<!--more-->
<strong>How does that work?</strong></p>

<p>Well itâ€™s quite easy. All there is to know actually is that thereâ€™s two logical parts involved:</p>

<ul>
  <li>The repository: where all your packages will be stored.</li>
  <li>The command line utility: that will help you manage everything.</li>
  <li>
    <p>To install Composer first you have to navigate to your project.</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  $ cd /path/to/my/project
</code></pre></div>    </div>
  </li>
</ul>

<p>Then you download Composer into your project</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	$ curl -s http://getcomposer.org/installer | php
</code></pre></div></div>

<p>Well, the first time I tried this I ran into a little trouble. I always got the following message:</p>

<p>Some settings on your machine make Composer unable to work properly. Make sure that you fix the issues listed below and run this script again:</p>

<p>The detect_unicode setting must be disabled.</p>

<p>Add the following to the end of your <code class="highlighter-rouge">php.ini</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>detect_unicode = Off
</code></pre></div></div>

<p>If youâ€™re not using the native PHP that comes with your system (Iâ€™m assuming youâ€™re using a unix based system) and youâ€™re using something like Mamp, Mamp Pro or even Zend Server you probably need to edit your php.ini file to add that line. However, you must check if the path to your php.ini is correct. In my case I had one of those apps installed and it was checking for the native php.ini path.</p>

<p>To check this, run the following:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	$ php -i | grep ini
</code></pre></div></div>

<p>Then you can update the correct php.ini. Moving forward.</p>

<p>At this point you should have a file called composer.phar in your project root. That is your command line utility. You can check if everything is ok by running the following command:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	$ php composer.phar
</code></pre></div></div>

<p>That will give you all the available commands.</p>

<p>Thatâ€™s it, that is all you need to know about installing composer into your projects. In the next issue weâ€™ll talk about getting actual packages from http://packagist.org/ and working with them in your projects.</p>

<p>For now, browse the following websites:</p>

<ul>
  <li><a href="http://getcomposer.org/">GetComposer</a></li>
  <li><a href="http://packagist.org/">Packagist</a></li>
</ul>
:ET