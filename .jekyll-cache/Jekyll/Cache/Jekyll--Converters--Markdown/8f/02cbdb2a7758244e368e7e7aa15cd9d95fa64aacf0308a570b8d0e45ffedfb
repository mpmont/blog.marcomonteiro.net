I",<hr />

<p>layout: post</p>

<p>title: The awesomeness of git hooks</p>

<p>date: 2013-10-10</p>

<p>tag: Git,hook,tips,Version-control,Webdev</p>

<p>description: Automation is probably the word we developers love the most. We’re lazy, that’s why there’s so many Wordpress and Joomla websites. Oh wait I was talking about developers. Those are</p>

<p>author: Marco Monteiro</p>

<p>categories: [Git,hook,tips,Version-control,Webdev]</p>

<hr />

<p>Automation is probably the word we developers love the most. We’re lazy, that’s why there’s so many Wordpress and Joomla websites. Oh wait I was talking about developers. Those are something different (let’s leave it at that).</p>

<p>So we version our code, and we obviously use git. BUt what if you wanted something to happen every-time we do make an action.</p>

<p>Well git-hooks got you covered.</p>

<!--more-->

<p>The current definition of git hooks:</p>

<blockquote>
  <p>Hooks are little scripts you can place in $GIT_DIR/hooks directory to trigger action at certain points. When git init is run, a handful of example hooks are copied into the hooks directory of the new repository, but by default they are all disabled. To enable a hook, rename it by removing its .sample suffix.</p>
</blockquote>

<blockquote>
  <p><small><strong>Note:</strong> It is also a requirement for a given hook to be executable. However - in a freshly initialized repository - the .sample files are executable by default.</small></p>
</blockquote>

<p>I’m not going to mention all the “actions” you can use with git-hooks. You can RTFM for that.</p>

<p>However, I can give you a real life example.</p>

<p>Imagine you’re using less with javascript:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;link rel="stylesheet/less" type="text/css" href="css/styles.less" /&gt;
&lt;script src="js/lib/less-1.1.3.min.js" type="text/javascript"&gt;&lt;/script&gt;
</code></pre></div></div>

<p>But now you want that to compiled every time you done editing and commit/push to your development server and the git post-recieve hook runs your build.sh and builds your css adn all that malarkey.</p>

<blockquote>
  <p><strong>Post-receive</strong></p>
</blockquote>

<blockquote>
  <p>This hook is invoked by git-receive-pack on the remote repository, which happens when a git push is done on a local repository. It executes on the remote repository once after all the refs have been updated.</p>
</blockquote>

<blockquote>
  <p>This hook executes once for the receive operation. It takes no arguments, but gets the same information as the pre-receive hook does on its standard input.</p>
</blockquote>

<blockquote>
  <p>This hook does not affect the outcome of git-receive-pack, as it is called after the real work is done.</p>
</blockquote>

<p><a href="http://git-scm.com/docs/githooks"><i class="icon-link"></i> RTFM</a></p>

<p><a href="http://net.tutsplus.com/tutorials/tools-and-tips/quick-tip-automation-with-git-hooks/"><i class="icon-youtube-play"></i> Net-Tuts tutorial on git-hooks</a></p>
:ET